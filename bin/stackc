#!/usr/bin/env node
var moment = require('moment');
var winston = require('winston');
var logger = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)({
        timestamp: function(){
            return moment().format('YYYY-MM-DD HH:mm:ss');
        },
      formatter: function(options) {
        // Return string will be passed to logger. 
        return JSON.stringify({severity: options.level.toUpperCase(), message: options.message});
      }
    })
  ]
});
var google = require('googleapis');
var monitoring = google.monitoring('v3');
var fs = require('fs');
var Termoil = require('termoil');
var stackc = new Termoil;
stackc.name('Stack Driver Custom Metrics Manager');
stackc.instructions('stackc [options]');
stackc.addVersion(new Termoil.Version('0.0.1', true));
stackc.addOption(new Termoil.Option(['-p', '-P', '--project'], 'project', new Termoil.Option.Type('value', true), 'Google Project'));
stackc.addOption(new Termoil.Option(['--debug'], 'debug', new Termoil.Option.Type('flag'), 'Print Debug Info'));

var stackc_create = new Termoil;
stackc_create.name('Stack Driver Custom Metrics Manager - Create Metric');
stackc_create.instructions('stackc [options] create [options]');
stackc_create.addVersion(new Termoil.Version('0.0.1', true));
stackc_create.addOption(new Termoil.Option(['-b', '-B', '--body'], 'body', new Termoil.Option.Type('value', false), 'Custom Metric JSON Body', '{}', JSON.parse));

stackc.addSubRoutine(new Termoil.SubRoutine(['create'], 'create', stackc_create));

stackc_create.on('parsed', function(){
    var body = this.get('body');
    var project = this.get('project');
    google.auth.getApplicationDefault(function(err, authClient){
        if( err ){
            logger.log('error', 'Failed to authenitcate with Google!');
            return logger.log('error', err);
        }
        if( authClient.createScopedRequired && authClient.createScopedRequired()){
            authClient = authClient.createScoped(['https://www.googleapis.com/auth/monitoring.write']);
        }
        var request = {
            name: "projects/" + project,
            resource: body,
            auth: authClient
        };
        monitoring.projects.timeSeries.create(request, function(err, result){
            if( err ){
                logger.log('error', 'Failed to update timeSeries!');
                return logger.log(err);
            }

            return logger.log('info', 'TimeSeries updated!');

        });
    });
});

var stackc_read = new Termoil;
stackc_read.name('Stack Driver Custom Metrics Manager - Read Metric');
stackc_read.instructions('stackc [options] read [options]');
stackc_read.addVersion(new Termoil.Version('0.0.1', true));
stackc_read.addOption(new Termoil.Option(['-f', '-F', '--filter'], 'filter', new Termoil.Option.Type('value', true), 'Metric Filter'));
stackc_read.addOption(new Termoil.Option(['--start-time'], 'start_time', new Termoil.Option.Type('value'), 'Start Time', moment().format('YYYY-MM-DD HH:mm:ss'), function(val){return moment(val).format('YYYY-MM-DDTHH:mm:ss.SSSZ');}));
stackc_read.addOption(new Termoil.Option(['--end-time'], 'end_time', new Termoil.Option.Type('value'), 'End Time', moment().format('YYYY-MM-DD HH:mm:ss'), function(val){return moment(val).format('YYYY-MM-DDTHH:mm:ss.SSSZ');}));

stackc.addSubRoutine(new Termoil.SubRoutine(['read'], 'read', stackc_read));

stackc_read.on('parsed', function(){
    var filter = this.get('filter');
    var startTime = this.get('start_time') || moment().subtract({minutes: 10}).format('YYYY-MM-DDTHH:mm:ss.SSSZ');
    var endTime = this.get('end_time') || moment().format('YYYY-MM-DDTHH:mm:ss.SSSZ');
    var project = this.get('project');
    if( this.get('debug') ){
      logger.transports.console.level = 'debug';
    }
    google.auth.getApplicationDefault(function(err, authClient){
        if( err ){
            logger.log('error', 'Failed to authenitcate with Google!');
            return logger.log('error', err);
        }
        if( authClient.createScopedRequired && authClient.createScopedRequired()){
            authClient = authClient.createScoped(['https://www.googleapis.com/auth/cloud-platform']);
        }
        var params = { 
          name: "projects/" + project,
          filter: filter,
          "interval.startTime": startTime,
          "interval.endTime": endTime,
          auth: authClient
        };
        logger.log('debug', 'params', JSON.stringify(params));
        logger.log('debug', 'running', 'monitoring.projects.timeSeries.list(params, cb)');
        monitoring.projects.timeSeries.list(params, function(err, result){
          logger.log('debug', 'api err', err);
          logger.log('debug', 'api result', JSON.stringify(result));
          if( err ){
              logger.log('error', 'Failed to read timeSeries!');
              return logger.log('error', JSON.stringify(err));
          }
          return process.stdout.write(JSON.stringify(result));
        });
    });
});

stackc.parse(Termoil.Skip(process.argv, 2));
